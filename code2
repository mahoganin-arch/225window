//@version=6
strategy("日経225 窓埋め・反転ナンピン戦略 v4.0", 
         overlay=true,
         initial_capital=500000,
         default_qty_type=strategy.fixed,
         default_qty_value=1,
         commission_type=strategy.commission.cash_per_order,
         commission_value=352,
         slippage=0,
         calc_on_every_tick=true,
         process_orders_on_close=false)

// =====================================
// パラメータ設定
// =====================================

// 窓埋めナンピン設定
gap_group = "📈 窓埋め戦略"
gap_enable = input.bool(true, "窓埋め戦略を有効化", group=gap_group)
gap_num_entries = input.int(3, "エントリー回数", minval=1, maxval=3, group=gap_group)
gap_interval = input.int(40, "エントリー間隔（円）", minval=10, maxval=100, group=gap_group)
gap_init_threshold = input.int(50, "初回閾値（円）", minval=30, maxval=200, group=gap_group)
gap_stop_loss = input.int(40, "損切り幅（円）", minval=20, maxval=300, group=gap_group)
gap_profit_offset = input.int(-10, "利確オフセット（円）", minval=-50, maxval=50, group=gap_group, tooltip="ポジション保有時の利確価格。負の値=窓埋め前に利確")
gap_fill_threshold = input.int(0, "窓埋め完了閾値（円）", minval=-50, maxval=50, group=gap_group, tooltip="ノーエントリー時に窓が埋まったと判定する基準。負の値=窓埋め前")
gap_reentry_mode = input.int(1, "再エントリーモード", minval=0, maxval=2, group=gap_group, tooltip="0=禁止 / 1=未エントリー時のみ / 2=常に可能")
allow_window_direction_change = input.bool(false, "窓方向変更を許可", group=gap_group, tooltip="ONの場合、窓の方向が途中で変わることを許可")

// 反転ナンピン設定
rev_group = "🔄 反転戦略"
rev_enable = input.bool(true, "反転戦略を有効化", group=rev_group)
rev_num_entries = input.int(3, "エントリー回数", minval=1, maxval=3, group=rev_group)
rev_morning_interval = input.int(25, "朝の間隔（円）", minval=10, maxval=100, group=rev_group)
rev_morning_profit = input.int(80, "朝の利確幅（円）", minval=10, maxval=200, group=rev_group)
rev_morning_stop = input.int(140, "朝の損切り幅（円）", minval=30, maxval=300, group=rev_group)
rev_evening_interval = input.int(15, "夕方の間隔（円）", minval=10, maxval=100, group=rev_group)
rev_evening_profit = input.int(50, "夕方の利確幅（円）", minval=10, maxval=200, group=rev_group)
rev_evening_stop = input.int(40, "夕方の損切り幅（円）", minval=30, maxval=300, group=rev_group)
rev_force_close_minutes = input.int(30, "反転強制決済（分）", minval=10, maxval=60, group=rev_group)

// フィルター設定
filter_group = "🔍 フィルター"
skip_monday_morning = input.bool(true, "月曜朝をスキップ", group=filter_group)
skip_noon_reversal = input.bool(true, "昼の反転をスキップ", group=filter_group)
min_gap_size = input.int(50, "最小窓サイズ（円）", minval=30, maxval=100, group=filter_group)
entry_morning_only = input.bool(false, "朝のみエントリー", group=filter_group)
entry_noon_only = input.bool(false, "昼のみエントリー", group=filter_group)
entry_evening_only = input.bool(false, "夕方のみエントリー", group=filter_group)

// 表示設定
display_group = "🎨 表示設定"
show_lines = input.bool(true, "ライン表示", group=display_group)
show_labels = input.bool(true, "ラベル表示", group=display_group)
show_background = input.bool(true, "時間帯の背景色", group=display_group)

// =====================================
// グローバル変数
// =====================================

// セッション管理
var float base_price = na
var bool in_stagnation = false
var bool can_entry = false
var int stagnation_period = 0
var bool is_monday_morning = false

// 窓の方向判定（窓埋めと反転で共有）
var bool gap_entered_this_session = false
var bool is_up_window = false
var bool gap_filled = false
var int gap_filled_time = 0

// 窓埋め制御フラグ
var bool gap_trade_completed = false
var bool gap_ever_entered = false

// 窓埋めエントリー目標価格
var float gap_target_1 = na
var float gap_target_2 = na
var float gap_target_3 = na

// 窓埋めエントリー実行価格
var float gap_entry_1 = na
var float gap_entry_2 = na
var float gap_entry_3 = na
var int gap_position_count = 0

// 窓埋め決済価格
var float gap_profit_price = na
var float gap_stop_price = na

// 反転制御フラグ
var bool reversal_entered_this_session = false
var bool reversal_trade_completed = false
var bool rev_is_morning = false

// 反転エントリー目標価格
var float rev_target_1 = na
var float rev_target_2 = na
var float rev_target_3 = na

// 反転エントリー実行価格
var float rev_entry_1 = na
var float rev_entry_2 = na
var float rev_entry_3 = na
var int rev_position_count = 0
var int rev_start_time = 0
var float rev_base_price = na

// 反転決済価格
var float rev_profit_target = na
var float rev_stop_target = na

// 表示制御
var int last_label_period = 0

// =====================================
// ヘルパー関数
// =====================================

get_jst_hour() =>
    hour(time, "GMT+9")

get_jst_minute() =>
    minute(time, "GMT+9")

get_jst_dayofweek() =>
    dayofweek(time, "GMT+9")

is_time_jst(h, m) =>
    get_jst_hour() == h and get_jst_minute() == m

is_monday_jst() =>
    get_jst_dayofweek() == 2

// 時間帯フィルター判定
is_entry_allowed_by_time_filter() =>
    if entry_morning_only
        stagnation_period == 1
    else if entry_noon_only
        stagnation_period == 2
    else if entry_evening_only
        stagnation_period == 3
    else
        true  // フィルターなし

// 再エントリー禁止時刻チェック
is_reentry_time_allowed() =>
    if stagnation_period == 1
        get_jst_hour() < 9
    else if stagnation_period == 2
        get_jst_hour() < 12 or (get_jst_hour() == 12 and get_jst_minute() < 30)
    else if stagnation_period == 3
        get_jst_hour() < 17
    else
        false

// =====================================
// セッション管理
// =====================================

// 朝セッション開始: 7:00
if is_time_jst(7, 0) and na(base_price)
    base_price := close[1]
    in_stagnation := true
    can_entry := false
    stagnation_period := 1
    is_monday_morning := is_monday_jst()
    
    // 完全リセット
    gap_entry_1 := na
    gap_entry_2 := na
    gap_entry_3 := na
    gap_target_1 := na
    gap_target_2 := na
    gap_target_3 := na
    gap_position_count := 0
    is_up_window := false
    gap_filled := false
    gap_filled_time := 0
    gap_profit_price := na
    gap_stop_price := na
    gap_entered_this_session := false
    gap_trade_completed := false
    gap_ever_entered := false
    rev_entry_1 := na
    rev_entry_2 := na
    rev_entry_3 := na
    rev_target_1 := na
    rev_target_2 := na
    rev_target_3 := na
    rev_position_count := 0
    rev_start_time := 0
    rev_base_price := na
    rev_profit_target := na
    rev_stop_target := na
    reversal_entered_this_session := false
    reversal_trade_completed := false

// 朝エントリー開始: 8:30
if is_time_jst(8, 30) and stagnation_period == 1
    can_entry := true

// 朝セッション終了: 10:45
if is_time_jst(10, 45) and stagnation_period == 1
    if strategy.position_size != 0
        strategy.close_all(comment="朝強制決済")
        alert("⏰朝セッション強制決済", alert.freq_once_per_bar)
    
    base_price := na
    in_stagnation := false
    can_entry := false
    stagnation_period := 0
    is_monday_morning := false
    last_label_period := 0
    
    // 完全リセット
    gap_entry_1 := na
    gap_entry_2 := na
    gap_entry_3 := na
    gap_target_1 := na
    gap_target_2 := na
    gap_target_3 := na
    gap_position_count := 0
    is_up_window := false
    gap_filled := false
    gap_filled_time := 0
    gap_profit_price := na
    gap_stop_price := na
    gap_entered_this_session := false
    gap_trade_completed := false
    gap_ever_entered := false
    rev_entry_1 := na
    rev_entry_2 := na
    rev_entry_3 := na
    rev_target_1 := na
    rev_target_2 := na
    rev_target_3 := na
    rev_position_count := 0
    rev_start_time := 0
    rev_base_price := na
    rev_profit_target := na
    rev_stop_target := na
    reversal_entered_this_session := false
    reversal_trade_completed := false

// 昼セッション開始: 11:30
if is_time_jst(11, 30) and na(base_price)
    base_price := close[1]
    in_stagnation := true
    can_entry := true
    stagnation_period := 2
    is_monday_morning := false
    
    // 完全リセット
    gap_entry_1 := na
    gap_entry_2 := na
    gap_entry_3 := na
    gap_target_1 := na
    gap_target_2 := na
    gap_target_3 := na
    gap_position_count := 0
    is_up_window := false
    gap_filled := false
    gap_filled_time := 0
    gap_profit_price := na
    gap_stop_price := na
    gap_entered_this_session := false
    gap_trade_completed := false
    gap_ever_entered := false
    rev_entry_1 := na
    rev_entry_2 := na
    rev_entry_3 := na
    rev_target_1 := na
    rev_target_2 := na
    rev_target_3 := na
    rev_position_count := 0
    rev_start_time := 0
    rev_base_price := na
    rev_profit_target := na
    rev_stop_target := na
    reversal_entered_this_session := false
    reversal_trade_completed := false

// 昼セッション終了: 14:30
if is_time_jst(14, 30) and stagnation_period == 2
    if strategy.position_size != 0
        strategy.close_all(comment="昼強制決済")
        alert("⏰昼セッション強制決済", alert.freq_once_per_bar)
    
    base_price := na
    in_stagnation := false
    can_entry := false
    stagnation_period := 0
    is_monday_morning := false
    last_label_period := 0
    
    // 完全リセット
    gap_entry_1 := na
    gap_entry_2 := na
    gap_entry_3 := na
    gap_target_1 := na
    gap_target_2 := na
    gap_target_3 := na
    gap_position_count := 0
    is_up_window := false
    gap_filled := false
    gap_filled_time := 0
    gap_profit_price := na
    gap_stop_price := na
    gap_entered_this_session := false
    gap_trade_completed := false
    gap_ever_entered := false
    rev_entry_1 := na
    rev_entry_2 := na
    rev_entry_3 := na
    rev_target_1 := na
    rev_target_2 := na
    rev_target_3 := na
    rev_position_count := 0
    rev_start_time := 0
    rev_base_price := na
    rev_profit_target := na
    rev_stop_target := na
    reversal_entered_this_session := false
    reversal_trade_completed := false

// 夕方セッション開始: 15:45
if is_time_jst(15, 45) and na(base_price)
    base_price := close[1]
    in_stagnation := true
    can_entry := true
    stagnation_period := 3
    is_monday_morning := false
    
    // 完全リセット
    gap_entry_1 := na
    gap_entry_2 := na
    gap_entry_3 := na
    gap_target_1 := na
    gap_target_2 := na
    gap_target_3 := na
    gap_position_count := 0
    is_up_window := false
    gap_filled := false
    gap_filled_time := 0
    gap_profit_price := na
    gap_stop_price := na
    gap_entered_this_session := false
    gap_trade_completed := false
    gap_ever_entered := false
    rev_entry_1 := na
    rev_entry_2 := na
    rev_entry_3 := na
    rev_target_1 := na
    rev_target_2 := na
    rev_target_3 := na
    rev_position_count := 0
    rev_start_time := 0
    rev_base_price := na
    rev_profit_target := na
    rev_stop_target := na
    reversal_entered_this_session := false
    reversal_trade_completed := false

// 夕方セッション終了: 19:00
if is_time_jst(19, 0) and stagnation_period == 3
    if strategy.position_size != 0
        strategy.close_all(comment="夕方強制決済")
        alert("⏰夕方セッション強制決済", alert.freq_once_per_bar)
    
    base_price := na
    in_stagnation := false
    can_entry := false
    stagnation_period := 0
    is_monday_morning := false
    last_label_period := 0
    
    // 完全リセット
    gap_entry_1 := na
    gap_entry_2 := na
    gap_entry_3 := na
    gap_target_1 := na
    gap_target_2 := na
    gap_target_3 := na
    gap_position_count := 0
    is_up_window := false
    gap_filled := false
    gap_filled_time := 0
    gap_profit_price := na
    gap_stop_price := na
    gap_entered_this_session := false
    gap_trade_completed := false
    gap_ever_entered := false
    rev_entry_1 := na
    rev_entry_2 := na
    rev_entry_3 := na
    rev_target_1 := na
    rev_target_2 := na
    rev_target_3 := na
    rev_position_count := 0
    rev_start_time := 0
    rev_base_price := na
    rev_profit_target := na
    rev_stop_target := na
    reversal_entered_this_session := false
    reversal_trade_completed := false

// =====================================
// 窓埋めの決済管理
// =====================================

if gap_position_count > 0 and strategy.position_size != 0 and not na(gap_profit_price) and not na(gap_stop_price)
    // 利確判定
    if is_up_window and low <= gap_profit_price and not gap_filled
        strategy.close_all(comment="窓埋め利確")
        alert("✅窓埋め利確: " + str.tostring(gap_profit_price) + "円", alert.freq_once_per_bar)
        
        // 反転用の基準価格を記録
        if rev_enable
            rev_base_price := base_price
            rev_start_time := time
            rev_is_morning := stagnation_period == 1
        
        // 窓埋め変数リセット
        gap_entry_1 := na
        gap_entry_2 := na
        gap_entry_3 := na
        gap_target_1 := na
        gap_target_2 := na
        gap_target_3 := na
        gap_position_count := 0
        gap_profit_price := na
        gap_stop_price := na
        gap_trade_completed := true
        gap_filled := true
        gap_filled_time := time
    
    else if not is_up_window and high >= gap_profit_price and not gap_filled
        strategy.close_all(comment="窓埋め利確")
        alert("✅窓埋め利確: " + str.tostring(gap_profit_price) + "円", alert.freq_once_per_bar)
        
        // 反転用の基準価格を記録
        if rev_enable
            rev_base_price := base_price
            rev_start_time := time
            rev_is_morning := stagnation_period == 1
        
        // 窓埋め変数リセット
        gap_entry_1 := na
        gap_entry_2 := na
        gap_entry_3 := na
        gap_target_1 := na
        gap_target_2 := na
        gap_target_3 := na
        gap_position_count := 0
        gap_profit_price := na
        gap_stop_price := na
        gap_trade_completed := true
        gap_filled := true
        gap_filled_time := time
    
    // 損切り判定
    else if is_up_window and high >= gap_stop_price
        strategy.close_all(comment="窓埋め損切り")
        alert("❌窓埋め損切り: " + str.tostring(gap_stop_price) + "円", alert.freq_once_per_bar)
        gap_entry_1 := na
        gap_entry_2 := na
        gap_entry_3 := na
        gap_target_1 := na
        gap_target_2 := na
        gap_target_3 := na
        gap_position_count := 0
        gap_profit_price := na
        gap_stop_price := na
        gap_trade_completed := true
        
        // 反転をキャンセル
        rev_base_price := na
        reversal_entered_this_session := false
        reversal_trade_completed := true
    
    else if not is_up_window and low <= gap_stop_price
        strategy.close_all(comment="窓埋め損切り")
        alert("❌窓埋め損切り: " + str.tostring(gap_stop_price) + "円", alert.freq_once_per_bar)
        gap_entry_1 := na
        gap_entry_2 := na
        gap_entry_3 := na
        gap_target_1 := na
        gap_target_2 := na
        gap_target_3 := na
        gap_position_count := 0
        gap_profit_price := na
        gap_stop_price := na
        gap_trade_completed := true
        
        // 反転をキャンセル
        rev_base_price := na
        reversal_entered_this_session := false
        reversal_trade_completed := true

// =====================================
// 窓の方向判定（窓埋めと反転で共有）
// =====================================

if in_stagnation and can_entry and not na(base_price) and (gap_enable or rev_enable) and is_entry_allowed_by_time_filter()
    // 月曜朝スキップ判定
    skip_entry = skip_monday_morning and is_monday_morning
    
    if not skip_entry
        // 窓方向の検出または変更
        should_detect_window = false
        
        if allow_window_direction_change
            // 方向変更許可: 毎バー再評価
            if not gap_entered_this_session or gap_position_count == 0
                should_detect_window := true
        else
            // 方向変更禁止: 初回のみ
            if not gap_entered_this_session
                should_detect_window := true
        
        if should_detect_window
            gap_up = high - base_price
            gap_down = base_price - low
            
            if gap_up >= min_gap_size and gap_up > gap_down
                // 方向が変わった場合、リセット
                if gap_entered_this_session and not is_up_window
                    gap_target_1 := na
                    gap_target_2 := na
                    gap_target_3 := na
                    gap_entry_1 := na
                    gap_entry_2 := na
                    gap_entry_3 := na
                    gap_position_count := 0
                    gap_filled := false
                    gap_trade_completed := false
                
                is_up_window := true
                gap_entered_this_session := true
                
                // エントリー目標価格を計算
                gap_target_1 := base_price + gap_init_threshold
                gap_target_2 := base_price + gap_init_threshold + gap_interval
                gap_target_3 := base_price + gap_init_threshold + gap_interval * 2
                
                // 損切り超えチェック
                final_target = gap_target_3
                check_stop = final_target + gap_stop_loss
                if high >= check_stop
                    gap_trade_completed := true
                    gap_target_1 := na
                    gap_target_2 := na
                    gap_target_3 := na
            
            else if gap_down >= min_gap_size and gap_down > gap_up
                // 方向が変わった場合、リセット
                if gap_entered_this_session and is_up_window
                    gap_target_1 := na
                    gap_target_2 := na
                    gap_target_3 := na
                    gap_entry_1 := na
                    gap_entry_2 := na
                    gap_entry_3 := na
                    gap_position_count := 0
                    gap_filled := false
                    gap_trade_completed := false
                
                is_up_window := false
                gap_entered_this_session := true
                
                // エントリー目標価格を計算
                gap_target_1 := base_price - gap_init_threshold
                gap_target_2 := base_price - gap_init_threshold - gap_interval
                gap_target_3 := base_price - gap_init_threshold - gap_interval * 2
                
                // 損切り超えチェック
                final_target = gap_target_3
                check_stop = final_target - gap_stop_loss
                if low <= check_stop
                    gap_trade_completed := true
                    gap_target_1 := na
                    gap_target_2 := na
                    gap_target_3 := na

// =====================================
// 窓埋め完了判定（常に実行）
// =====================================

if in_stagnation and not na(base_price) and gap_entered_this_session and not gap_filled and gap_position_count == 0
    // ポジションなしで窓埋め価格に到達した場合（利確オフセットと同じ計算式）
    if is_up_window and low <= (base_price - gap_fill_threshold)
        gap_filled := true
        gap_filled_time := time
        
        // 反転用の基準価格を記録
        if rev_enable
            rev_base_price := base_price
            rev_start_time := 0  // 反転エントリー1で設定するため、ここではリセット
            rev_is_morning := stagnation_period == 1
    
    else if not is_up_window and high >= (base_price + gap_fill_threshold)
        gap_filled := true
        gap_filled_time := time
        
        // 反転用の基準価格を記録
        if rev_enable
            rev_base_price := base_price
            rev_start_time := 0  // 反転エントリー1で設定するため、ここではリセット
            rev_is_morning := stagnation_period == 1

// =====================================
// 再エントリー判定
// =====================================

// 窓埋め完了後の再エントリー判定
if gap_filled and not gap_trade_completed and gap_reentry_mode > 0 and is_reentry_time_allowed()
    allow_reentry = false
    
    if gap_reentry_mode == 1
        // モード1: 未エントリー時のみ
        if not gap_ever_entered
            allow_reentry := true
    else if gap_reentry_mode == 2
        // モード2: 常に可能
        allow_reentry := true
    
    if allow_reentry
        // 再び初回閾値に到達したか確認
        if is_up_window and high >= gap_target_1
            gap_filled := false
            gap_trade_completed := false
        else if not is_up_window and low <= gap_target_1
            gap_filled := false
            gap_trade_completed := false

// =====================================
// 窓埋めエントリー
// =====================================

if gap_enable and gap_entered_this_session and not na(gap_target_1) and not gap_trade_completed and not gap_filled
    // 上窓（ショート）
    if is_up_window
        // 利確・損切り価格を設定（初回エントリー時）
        if na(gap_profit_price)
            gap_profit_price := base_price - gap_profit_offset
            gap_stop_price := gap_target_3 + gap_stop_loss
        
        // エントリー1
        if na(gap_entry_1) and high >= gap_target_1
            strategy.entry("gap_short_1", strategy.short, qty=1, comment="窓埋め1")
            gap_entry_1 := gap_target_1
            gap_position_count := gap_position_count + 1
            gap_ever_entered := true
            alert("🔽窓埋めショート1: " + str.tostring(gap_target_1) + "円 (基準" + str.tostring(base_price) + "円)", alert.freq_once_per_bar)
        
        // エントリー2
        if gap_num_entries >= 2 and na(gap_entry_2) and high >= gap_target_2
            strategy.entry("gap_short_2", strategy.short, qty=1, comment="窓埋め2")
            gap_entry_2 := gap_target_2
            gap_position_count := gap_position_count + 1
            alert("🔽窓埋めショート2: " + str.tostring(gap_target_2) + "円", alert.freq_once_per_bar)
        
        // エントリー3
        if gap_num_entries >= 3 and na(gap_entry_3) and high >= gap_target_3
            strategy.entry("gap_short_3", strategy.short, qty=1, comment="窓埋め3")
            gap_entry_3 := gap_target_3
            gap_position_count := gap_position_count + 1
            alert("🔽窓埋めショート3: " + str.tostring(gap_target_3) + "円", alert.freq_once_per_bar)
    
    // 下窓（ロング）
    else
        // 利確・損切り価格を設定（初回エントリー時）
        if na(gap_profit_price)
            gap_profit_price := base_price + gap_profit_offset
            gap_stop_price := gap_target_3 - gap_stop_loss
        
        // エントリー1
        if na(gap_entry_1) and low <= gap_target_1
            strategy.entry("gap_long_1", strategy.long, qty=1, comment="窓埋め1")
            gap_entry_1 := gap_target_1
            gap_position_count := gap_position_count + 1
            gap_ever_entered := true
            alert("🔼窓埋めロング1: " + str.tostring(gap_target_1) + "円 (基準" + str.tostring(base_price) + "円)", alert.freq_once_per_bar)
        
        // エントリー2
        if gap_num_entries >= 2 and na(gap_entry_2) and low <= gap_target_2
            strategy.entry("gap_long_2", strategy.long, qty=1, comment="窓埋め2")
            gap_entry_2 := gap_target_2
            gap_position_count := gap_position_count + 1
            alert("🔼窓埋めロング2: " + str.tostring(gap_target_2) + "円", alert.freq_once_per_bar)
        
        // エントリー3
        if gap_num_entries >= 3 and na(gap_entry_3) and low <= gap_target_3
            strategy.entry("gap_long_3", strategy.long, qty=1, comment="窓埋め3")
            gap_entry_3 := gap_target_3
            gap_position_count := gap_position_count + 1
            alert("🔼窓埋めロング3: " + str.tostring(gap_target_3) + "円", alert.freq_once_per_bar)

// =====================================
// 反転戦略のエントリー
// =====================================

// 反転開始判定（窓埋め完了後、ポジションなしの状態で）
if gap_filled and rev_enable and not na(rev_base_price) and not reversal_entered_this_session and not reversal_trade_completed and rev_position_count == 0 and strategy.position_size == 0 and is_entry_allowed_by_time_filter()
    // 昼の反転をスキップ
    skip_reversal = skip_noon_reversal and stagnation_period == 2
    // 月曜朝をスキップ
    skip_reversal := skip_reversal or (skip_monday_morning and is_monday_morning)
    
    if not skip_reversal
        reversal_entered_this_session := true
        
        // 時間帯別パラメータ
        rev_interval = rev_is_morning ? rev_morning_interval : rev_evening_interval
        rev_profit = rev_is_morning ? rev_morning_profit : rev_evening_profit
        rev_stop = rev_is_morning ? rev_morning_stop : rev_evening_stop
        
        // 反転エントリー目標価格を1回だけ計算
        if is_up_window
            // 上窓埋め後 → ロング
            rev_target_1 := rev_base_price
            rev_target_2 := rev_base_price - rev_interval
            rev_target_3 := rev_base_price - rev_interval * 2
            
            // 利確・損切り価格を設定
            avg_price = (rev_target_1 + rev_target_2 + rev_target_3) / 3
            rev_profit_target := avg_price + rev_profit
            rev_stop_target := rev_target_3 - rev_stop
        else
            // 下窓埋め後 → ショート
            rev_target_1 := rev_base_price
            rev_target_2 := rev_base_price + rev_interval
            rev_target_3 := rev_base_price + rev_interval * 2
            
            // 利確・損切り価格を設定
            avg_price = (rev_target_1 + rev_target_2 + rev_target_3) / 3
            rev_profit_target := avg_price - rev_profit
            rev_stop_target := rev_target_3 + rev_stop

// 反転エントリー実行（並列判定）
if reversal_entered_this_session and not na(rev_target_1) and not reversal_trade_completed
    if is_up_window
        // 上窓埋め後 → ロング
        if na(rev_entry_1) and low <= rev_target_1
            strategy.entry("rev_long_1", strategy.long, qty=1, comment="反転1")
            rev_entry_1 := rev_target_1
            rev_position_count := rev_position_count + 1
            alert("🔼反転ロング1: " + str.tostring(rev_target_1) + "円 (基準" + str.tostring(rev_base_price) + "円)", alert.freq_once_per_bar)
        
        if rev_num_entries >= 2 and na(rev_entry_2) and low <= rev_target_2
            strategy.entry("rev_long_2", strategy.long, qty=1, comment="反転2")
            rev_entry_2 := rev_target_2
            rev_position_count := rev_position_count + 1
            alert("🔼反転ロング2: " + str.tostring(rev_target_2) + "円", alert.freq_once_per_bar)
        
        if rev_num_entries >= 3 and na(rev_entry_3) and low <= rev_target_3
            strategy.entry("rev_long_3", strategy.long, qty=1, comment="反転3")
            rev_entry_3 := rev_target_3
            rev_position_count := rev_position_count + 1
            alert("🔼反転ロング3: " + str.tostring(rev_target_3) + "円", alert.freq_once_per_bar)
    else
        // 下窓埋め後 → ショート
        if na(rev_entry_1) and high >= rev_target_1
            strategy.entry("rev_short_1", strategy.short, qty=1, comment="反転1")
            rev_entry_1 := rev_target_1
            rev_position_count := rev_position_count + 1
            alert("🔽反転ショート1: " + str.tostring(rev_target_1) + "円 (基準" + str.tostring(rev_base_price) + "円)", alert.freq_once_per_bar)
        
        if rev_num_entries >= 2 and na(rev_entry_2) and high >= rev_target_2
            strategy.entry("rev_short_2", strategy.short, qty=1, comment="反転2")
            rev_entry_2 := rev_target_2
            rev_position_count := rev_position_count + 1
            alert("🔽反転ショート2: " + str.tostring(rev_target_2) + "円", alert.freq_once_per_bar)
        
        if rev_num_entries >= 3 and na(rev_entry_3) and high >= rev_target_3
            strategy.entry("rev_short_3", strategy.short, qty=1, comment="反転3")
            rev_entry_3 := rev_target_3
            rev_position_count := rev_position_count + 1
            alert("🔽反転ショート3: " + str.tostring(rev_target_3) + "円", alert.freq_once_per_bar)

// =====================================
// 反転の決済管理
// =====================================

if rev_position_count > 0 and strategy.position_size != 0 and not na(rev_profit_target) and not na(rev_stop_target)
    // 利確判定
    if is_up_window and high >= rev_profit_target
        strategy.close_all(comment="反転利確")
        alert("✅反転利確: " + str.tostring(rev_profit_target) + "円", alert.freq_once_per_bar)
        rev_entry_1 := na
        rev_entry_2 := na
        rev_entry_3 := na
        rev_target_1 := na
        rev_target_2 := na
        rev_target_3 := na
        rev_position_count := 0
        rev_start_time := 0
        rev_base_price := na
        rev_profit_target := na
        rev_stop_target := na
        gap_filled := false
        reversal_trade_completed := true
    
    else if not is_up_window and low <= rev_profit_target
        strategy.close_all(comment="反転利確")
        alert("✅反転利確: " + str.tostring(rev_profit_target) + "円", alert.freq_once_per_bar)
        rev_entry_1 := na
        rev_entry_2 := na
        rev_entry_3 := na
        rev_target_1 := na
        rev_target_2 := na
        rev_target_3 := na
        rev_position_count := 0
        rev_start_time := 0
        rev_base_price := na
        rev_profit_target := na
        rev_stop_target := na
        gap_filled := false
        reversal_trade_completed := true
    
    // 損切り判定
    else if is_up_window and low <= rev_stop_target
        strategy.close_all(comment="反転損切り")
        alert("❌反転損切り: " + str.tostring(rev_stop_target) + "円", alert.freq_once_per_bar)
        rev_entry_1 := na
        rev_entry_2 := na
        rev_entry_3 := na
        rev_target_1 := na
        rev_target_2 := na
        rev_target_3 := na
        rev_position_count := 0
        rev_start_time := 0
        rev_base_price := na
        rev_profit_target := na
        rev_stop_target := na
        gap_filled := false
        reversal_trade_completed := true
    
    else if not is_up_window and high >= rev_stop_target
        strategy.close_all(comment="反転損切り")
        alert("❌反転損切り: " + str.tostring(rev_stop_target) + "円", alert.freq_once_per_bar)
        rev_entry_1 := na
        rev_entry_2 := na
        rev_entry_3 := na
        rev_target_1 := na
        rev_target_2 := na
        rev_target_3 := na
        rev_position_count := 0
        rev_start_time := 0
        rev_base_price := na
        rev_profit_target := na
        rev_stop_target := na
        gap_filled := false
        reversal_trade_completed := true
    
    // 30分経過での強制決済
    else if (time - rev_start_time) >= rev_force_close_minutes * 60 * 1000
        strategy.close_all(comment="反転30分強制決済")
        alert("⏰反転強制決済: 30分経過", alert.freq_once_per_bar)
        rev_entry_1 := na
        rev_entry_2 := na
        rev_entry_3 := na
        rev_target_1 := na
        rev_target_2 := na
        rev_target_3 := na
        rev_position_count := 0
        rev_start_time := 0
        rev_base_price := na
        rev_profit_target := na
        rev_stop_target := na
        gap_filled := false
        reversal_trade_completed := true

// =====================================
// ビジュアル表示
// =====================================

// plot用の表示変数を事前計算
show_base = show_lines and not na(base_price) ? base_price : na
show_gap_target_1 = show_lines and not na(gap_target_1) ? gap_target_1 : na
show_gap_target_2 = show_lines and not na(gap_target_2) ? gap_target_2 : na
show_gap_target_3 = show_lines and not na(gap_target_3) ? gap_target_3 : na
show_gap_profit = show_lines and not na(gap_profit_price) and gap_position_count > 0 ? gap_profit_price : na
show_gap_stop = show_lines and not na(gap_stop_price) and gap_position_count > 0 ? gap_stop_price : na
show_rev_target_1 = show_lines and not na(rev_target_1) ? rev_target_1 : na
show_rev_target_2 = show_lines and not na(rev_target_2) ? rev_target_2 : na
show_rev_target_3 = show_lines and not na(rev_target_3) ? rev_target_3 : na
show_rev_profit = show_lines and not na(rev_profit_target) and rev_position_count > 0 ? rev_profit_target : na
show_rev_stop = show_lines and not na(rev_stop_target) and rev_position_count > 0 ? rev_stop_target : na

// 背景色
bgcolor(show_background and in_stagnation ? color.new(color.blue, 95) : na)

// 基準価格
plot(show_base, "基準価格", color=color.new(color.white, 0), linewidth=2)

// 窓埋めエントリーライン
plot(show_gap_target_1, "窓埋め1", color=color.new(color.blue, 30), linewidth=1, style=plot.style_circles)
plot(show_gap_target_2, "窓埋め2", color=color.new(color.blue, 30), linewidth=1, style=plot.style_circles)
plot(show_gap_target_3, "窓埋め3", color=color.new(color.blue, 30), linewidth=1, style=plot.style_circles)

// 窓埋め決済ライン
plot(show_gap_stop, "窓埋め損切り", color=color.new(color.red, 0), linewidth=2)
plot(show_gap_profit, "窓埋め利確", color=color.new(color.green, 0), linewidth=2)

// 反転エントリーライン
plot(show_rev_target_1, "反転1", color=color.new(color.orange, 30), linewidth=1, style=plot.style_cross)
plot(show_rev_target_2, "反転2", color=color.new(color.orange, 30), linewidth=1, style=plot.style_cross)
plot(show_rev_target_3, "反転3", color=color.new(color.orange, 30), linewidth=1, style=plot.style_cross)

// 反転決済ライン
plot(show_rev_profit, "反転利確", color=color.new(color.lime, 0), linewidth=2)
plot(show_rev_stop, "反転損切り", color=color.new(color.maroon, 0), linewidth=2)

// ラベル表示
if show_labels and in_stagnation and not na(base_price) and stagnation_period != last_label_period
    period_text = stagnation_period == 1 ? "朝" : (stagnation_period == 2 ? "昼" : "夕方")
    current_hour = get_jst_hour()
    current_minute = get_jst_minute()
    time_text = str.format("{0,number,00}:{1,number,00}", current_hour, current_minute)
    label.new(bar_index, high, period_text + "セッション\n" + time_text + " JST\n基準: " + str.tostring(base_price), 
              style=label.style_label_down, 
              color=color.new(color.blue, 70), 
              textcolor=color.white, 
              size=size.small)
    last_label_period := stagnation_period
